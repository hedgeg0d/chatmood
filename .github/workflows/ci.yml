name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.5'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: |
        mkdir -p bin
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/chatmood cmd/server/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chatmood-binary
        path: bin/chatmood

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: hedgeg0d/chatmood
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      run: |
        echo "Deployment would happen here"
        echo "This could include:"
        echo "- SSH to server"
        echo "- Pull latest Docker image"
        echo "- Update docker-compose.yml"
        echo "- Restart services"
        echo "- Run health checks"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build release binaries
      run: |
        mkdir -p releases

        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -o releases/chatmood-linux-amd64 cmd/server/main.go

        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -o releases/chatmood-linux-arm64 cmd/server/main.go

        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -o releases/chatmood-darwin-amd64 cmd/server/main.go

        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -o releases/chatmood-darwin-arm64 cmd/server/main.go

        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -o releases/chatmood-windows-amd64.exe cmd/server/main.go

        # Create archives
        cd releases
        tar -czf chatmood-linux-amd64.tar.gz chatmood-linux-amd64
        tar -czf chatmood-linux-arm64.tar.gz chatmood-linux-arm64
        tar -czf chatmood-darwin-amd64.tar.gz chatmood-darwin-amd64
        tar -czf chatmood-darwin-arm64.tar.gz chatmood-darwin-arm64
        zip chatmood-windows-amd64.zip chatmood-windows-amd64.exe

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          releases/chatmood-*.tar.gz
          releases/chatmood-*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notification:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Send success notification
      run: |
        echo "üéâ ChatMood CI/CD pipeline completed successfully!"
        echo "Build: ‚úÖ Tests: ‚úÖ Lint: ‚úÖ"
        # Here you could send notifications to Slack, Discord, etc.

  notification-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: failure()

    steps:
    - name: Send failure notification
      run: |
        echo "‚ùå ChatMood CI/CD pipeline failed!"
        echo "Please check the logs and fix the issues."
        # Here you could send notifications to Slack, Discord, etc.
